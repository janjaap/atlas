import { batenCategories, batenCategoryLabels, kostenCategories, kostenCategoryLabels } from '../categories';
import { displayFactor, precisionRound } from '../helpers';

const generateData = (data, categories, labels, isKosten) => (
  data.jaren.map((year) => ({
    name: year.name,
    categories: categories.some((category) => {
      const item = year.categories[category] || {};
      return item.begroot || item.begroot === 0;
    }) && categories.map((category) => {
      const item = year.categories[category] || {};
      const begroot = isKosten ? (item.begroot * -1) || 0 : item.begroot || 0;
      const begrootValue = begroot / displayFactor;
      const begrootRounded = precisionRound(begrootValue, 1);
      const begrootTooSmallLabel = begrootValue ? '<0,05' : '';
      const begrootLabel = begrootRounded ? `${begrootRounded}`.replace('.', ',') : begrootTooSmallLabel;
      return {
        begroot,
        begrootLabel,
        begrootValue,
        id: category,
        name: labels[category]
      };
    })
  }))
);

const generateGraphData = (data) => {
  const { kosten, baten } = data;
  const emptyValue = { jaren: [] };
  const kostenJaren = generateData(
    kosten || emptyValue,
    kostenCategories,
    kostenCategoryLabels,
    true
  );
  const batenJaren = generateData(
    baten || emptyValue,
    batenCategories,
    batenCategoryLabels,
    false
  );
  const jaren = batenJaren.map((batenJaar) => {
    const kostenJaar = kostenJaren.find((kostenJaar_) => kostenJaar_.name === batenJaar.name);
    return {
      ...batenJaar,
      categories: {
        batenCategories: batenJaar.categories,
        kostenCategories: kostenJaar ? kostenJaar.categories : 0
      }
    };
  });
  return jaren;
};

const getMax = ({ max_jaren_axis_begroot }) =>
  // eslint-disable-next-line camelcase
  Math.ceil(Math.round(max_jaren_axis_begroot / displayFactor) * 1.2);

export {
  generateGraphData,
  getMax
};
