import { batenCategories, batenCategoryLabels, kostenCategories, kostenCategoryLabels } from '../categories';

import { generateGraphData, getMax } from './detail-grondexploitatie-graph-totals';

describe('Grondexploitatie Grafiek Totale Begroting Service', () => {
  describe('generateGraphData', () => {
    // Baten categories
    const bedrijfsruimte = batenCategories[3];
    const kantoorruimte = batenCategories[4];
    const marktwoningen = batenCategories[2];
    const commercieel = batenCategories[6];
    const lupsum = batenCategories[8];

    // Kosten categories
    const bodemsanering = kostenCategories[1];
    const bouwrijpMaken = kostenCategories[2];
    const civieleConstructies = kostenCategories[3];
    const grondbedrijfVreemd = kostenCategories[4];
    const overig = kostenCategories[8];

    const mockApiData = {
      baten: {
        totaal: {
          categories: {
            [bedrijfsruimte]: {
              begroot: 5000000,
              geboekt: 3000000
            },
            [kantoorruimte]: {
              begroot: 500000,
              geboekt: 0
            },
            [marktwoningen]: {
              begroot: 0,
              geboekt: 45000
            },
            [lupsum]: {
              begroot: 449999,
              geboekt: 449999
            }
          }
        }
      },
      kosten: {
        totaal: {
          categories: {
            [bodemsanering]: {
              begroot: -5000000,
              geboekt: -3000000
            },
            [bouwrijpMaken]: {
              begroot: -500000,
              geboekt: 0
            },
            [civieleConstructies]: {
              begroot: 0,
              geboekt: 45000
            },
            [overig]: {
              begroot: -449999,
              geboekt: -449999
            }
          }
        }
      }
    };
    const graphData = generateGraphData(mockApiData);
    const findBatenItem = (category) => graphData.baten.find((item) => item.name === category);
    const findKostenItem = (category) => graphData.kosten.find((item) => item.name === category);

    it('should return the data in correct format', () => {
      // Baten
      expect(findBatenItem(batenCategoryLabels[kantoorruimte])).toEqual({
        name: batenCategoryLabels[kantoorruimte],
        id: kantoorruimte,
        begroot: 500000,
        geboekt: 0,
        begrootLabel: '0,5',
        begrootValue: 0.5,
        geboektLabel: '0',
        geboektValue: 0
      });
      expect(findBatenItem(batenCategoryLabels[bedrijfsruimte])).toEqual({
        name: batenCategoryLabels[bedrijfsruimte],
        id: bedrijfsruimte,
        begroot: 5000000,
        geboekt: 3000000,
        begrootLabel: '5',
        begrootValue: 5,
        geboektLabel: '3',
        geboektValue: 3
      });
      expect(findBatenItem(batenCategoryLabels[commercieel])).toEqual({
        name: batenCategoryLabels[commercieel],
        id: commercieel,
        begroot: 0,
        geboekt: 0,
        begrootLabel: '',
        begrootValue: 0,
        geboektLabel: '',
        geboektValue: 0
      });

      // Kosten
      expect(findKostenItem(kostenCategoryLabels[bouwrijpMaken])).toEqual({
        name: kostenCategoryLabels[bouwrijpMaken],
        id: bouwrijpMaken,
        begroot: 500000,
        geboekt: 0,
        begrootLabel: '0,5',
        begrootValue: 0.5,
        geboektLabel: '0',
        geboektValue: 0
      });
      expect(findKostenItem(kostenCategoryLabels[bodemsanering])).toEqual({
        name: kostenCategoryLabels[bodemsanering],
        id: bodemsanering,
        begroot: 5000000,
        geboekt: 3000000,
        begrootLabel: '5',
        begrootValue: 5,
        geboektLabel: '3',
        geboektValue: 3
      });
      expect(findKostenItem(kostenCategoryLabels[grondbedrijfVreemd])).toEqual({
        name: kostenCategoryLabels[grondbedrijfVreemd],
        id: grondbedrijfVreemd,
        begroot: 0,
        geboekt: 0,
        begrootLabel: '',
        begrootValue: 0,
        geboektLabel: '',
        geboektValue: 0
      });
    });

    it('should complete the label correctly', () => {
      // Baten
      expect(findBatenItem(batenCategoryLabels[marktwoningen]).begrootLabel).toEqual('');
      expect(findBatenItem(batenCategoryLabels[marktwoningen]).geboektLabel).toEqual('<0,05');
      expect(findBatenItem(batenCategoryLabels[lupsum]).begrootLabel).toEqual('0,4');
      expect(findBatenItem(batenCategoryLabels[lupsum]).geboektLabel).toEqual('0,4');

      // Kosten
      expect(findKostenItem(kostenCategoryLabels[civieleConstructies]).begrootLabel).toEqual('');
      expect(findKostenItem(kostenCategoryLabels[civieleConstructies]).geboektLabel).toEqual('<0,05');
      expect(findKostenItem(kostenCategoryLabels[overig]).begrootLabel).toEqual('0,4');
      expect(findKostenItem(kostenCategoryLabels[overig]).geboektLabel).toEqual('0,4');
    });
  });

  describe('getMax', () => {
    it('should return the max, devided by the display factor, rounded', () => {
      expect(getMax({ max_totaal_axis_begroot: 500000000 })).toEqual(600);
      expect(getMax({ max_totaal_axis_begroot: 500000 })).toEqual(2);
    });
  });
});
