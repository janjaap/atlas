import React from 'react';
import PropTypes from 'prop-types';
import { Legend, BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell, LabelList, Rectangle } from 'recharts';

import DetailGrondexploitatieGraphLegend from '../graph-legend';
import {
  batenCategoryLabels,
  getBatenCategoryColor,
  getKostenCategoryColor,
  kostenCategoryLabels
} from '../../../services/grondexploitatie/categories';
import './_detail-grondexploitatie-graph-totals.scss';

export const CustomBar = (props) => {
  const { fill, height, width, x, y } = props;
  return (
    <Rectangle
      fill={fill}
      height={height / 2}
      width={width}
      x={x}
      y={y}
    />
  );
};

CustomBar.defaultProps = {
  fill: '',
  height: 0,
  width: 0,
  x: 0,
  y: 0
};

CustomBar.propTypes = {
  fill: PropTypes.string,
  height: PropTypes.number,
  width: PropTypes.number,
  x: PropTypes.number,
  y: PropTypes.number
};

export const CustomLabel = (props) => {
  const { x, y, width, height, value } = props;
  return (
    <text
      x={x + width + 5}
      y={y + 10}
      width={width}
      height={height}
      fill="#000000"
      textAnchor="start"
      className="detail-grondexploitatie-graph__value"
    >
      {value}
    </text>
  );
};

CustomLabel.defaultProps = {
  height: 0,
  value: '',
  width: 0,
  x: 0,
  y: 0
};

CustomLabel.propTypes = {
  height: PropTypes.number,
  value: PropTypes.string,
  width: PropTypes.number,
  x: PropTypes.number,
  y: PropTypes.number
};

export const CustomYTick = (props) => {
  const { x, y, payload } = props;
  return (
    <text
      x={x}
      y={y - 3}
      fill="#999999"
      textAnchor="end"
      className="detail-grondexploitatie-graph__y-tick"
    >
      {payload.value}
    </text>
  );
};

CustomYTick.defaultProps = {
  payload: {
    value: ''
  },
  x: 0,
  y: 0
};

CustomYTick.propTypes = {
  payload: PropTypes.shape({
    value: PropTypes.string
  }),
  x: PropTypes.number,
  y: PropTypes.number
};

const renderGraph = (data, max, categoryLabels, getCategoryColor) => (
  <div className="detail-grondexploitatie-graph__container">
    <ResponsiveContainer
      minHeight={559}
      minWidth={500}
      width="100%"
    >
      <BarChart
        barSize={20}
        data={data}
        layout="vertical"
      >
        <XAxis
          axisLine={false}
          domain={['auto', /* istanbul ignore next */ () => max]}
          label={{
            fill: '#999999',
            offset: -10,
            position: 'insideBottom',
            value: 'Miljoenen'
          }}
          tick={{ fill: '#999999' }}
          tickLine={false}
          type="number"
        />
        <YAxis
          axisLine={false}
          dataKey="name"
          hide={false}
          padding={{ top: 16, bottom: 16 }}
          tick={<CustomYTick />}
          tickLine={false}
          type="category"
          width={180}
        />
        <CartesianGrid
          fill="#F6F6F6"
          horizontal={false}
        />
        <Legend content={<DetailGrondexploitatieGraphLegend categoryLabels={categoryLabels} />} />
        <Bar
          dataKey="begrootValue"
          name="category"
        >
          {
            data.map((entry) => (
              <Cell
                fill={getCategoryColor(entry.id)}
                key={entry.name}
              />
            ))
          }
          <LabelList
            dataKey="begrootLabel"
            fill="#000000"
            position="right"
          />
        </Bar>
        <Bar
          dataKey="geboektValue"
          fill="#808080"
          name="realized"
          shape={<CustomBar />}
        >
          <LabelList
            dataKey="geboektLabel"
            fill="#000000"
            position="right"
            content={<CustomLabel />}
          />
        </Bar>
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const renderTitle = (content, hasSecondaryTitle) => (
  hasSecondaryTitle ? (
    <h4 className="detail-grondexploitatie-graph__subtitle">
      { content }
    </h4>
  ) : (
    <h3 className="detail-grondexploitatie-graph__title">
      { content }
    </h3>
  )
);

const DetailGrondexploitatieGraphTotals = ({ data: { baten, kosten }, max, hasSecondaryTitle }) => (
  <div>
    <div className="detail-grondexploitatie-graph">
      { renderTitle('Totale begroting baten', hasSecondaryTitle) }
      { renderGraph(baten, max, batenCategoryLabels, getBatenCategoryColor) }
    </div>
    <div className="detail-grondexploitatie-graph">
      { renderTitle('Totale begroting kosten', hasSecondaryTitle) }
      { renderGraph(kosten, max, kostenCategoryLabels, getKostenCategoryColor) }
    </div>
  </div>
);

DetailGrondexploitatieGraphTotals.defaultProps = {
  data: {
    baten: [],
    kosten: []
  },
  max: 0,
  hasSecondaryTitle: false
};

DetailGrondexploitatieGraphTotals.propTypes = {
  data: PropTypes.shape({
    baten: PropTypes.arrayOf(PropTypes.shape({})),
    kosten: PropTypes.arrayOf(PropTypes.shape({}))
  }),
  max: PropTypes.number.isRequired,
  hasSecondaryTitle: PropTypes.bool
};

export default DetailGrondexploitatieGraphTotals;
